package <%= node.namespace %>

import brotorift._
import java.net.InetSocketAddress
import akka.actor.Props
import akka.actor.ActorRef
import akka.io.Tcp.ConnectionClosed

<% for e in runtime.enums.values %>
/** <%= e.doc %> */
object <%= e.name %> extends Enumeration {
  <% for v in e.elements.values %>
  /** <%= v.doc %> */
  val <%= v.name %> = Value(<%= v.value %>)
<% end %>}
<% end %>
<% for s in runtime.structs.values %>
/** <%= s.doc %> */
class <%= s.name %> extends Struct {
  <% for m in s.members %>
  /** <%= m.doc %> */
  var <%= m.name %>: <%= m.type.scala %> = _
  <% end %>
  def this(<%= s.members.map { |m| m.name + ': ' + m.type.scala } .join ', ' %>) = {
    this()<% for m in s.members %>
    this.<%= m.name %> = <%= m.name %><% end %>
  }

  override def readFromPacket(packet: InPacket) = {<% for m in s.members %>
    <%= m.name %> = <%= m.scala_read %><% end %>
  }
  
  override def writeToPacket(packet: OutPacket) = {<% for m in s.members %>
    <%= m.scala_write %><% end %>
  }
}
<% end %>
<% for n in runtime.get_node_directions node, :server %>
object <%= n.connection_name %> {
  private object InMessage {<% for m in n.in_direction.messages.values %>
    val <%= m.name %> = <%= m.id %><% end %>
  }
  
  private object OutMessage {<% for m in n.out_direction.messages.values %>
    val <%= m.name %> = <%= m.id %><% end %>
  }
  <% for m in n.out_direction.messages.values %>
  /** <%= m.doc %>
   *  <% for p in m.members %>
   *  @param <%= p.name %> <%= p.doc %><% end %>
   */
  case class <%= m.name %>(<%= m.members.map { |p| p.name + ': ' + p.type.scala } .join ', ' %>)
<% end %>}
<% end %>
<% for n in runtime.get_node_directions node, :server %>
abstract class <%= n.connection_name %>(remote: ActorRef, address: InetSocketAddress) extends Connection(remote, address) {
  import <%= n.connection_name %>._
  
  this.onOpen()
  
  override def processMessages(msg: Any): Unit = {
    msg match {
      case _: ConnectionClosed =>
        this.onClose()
        context.stop(self)<% for m in n.out_direction.messages.values %>
      case <%= m.name %>(<%= m.members.map { |p| p.name } .join ', ' %>) =>
        val packet = new OutPacket(OutMessage.<%= m.name %>)<% for p in m.members %>
        <%= p.scala_write %><% end %>
        this.sendPacket(packet)<% end %>
    }
  }
  
  def processPacket(packet: InPacket) = {
    packet.header match {<% for m in n.in_direction.messages.values %>
      case InMessage.<%= m.name %> =><% for p in m.members %>
        val <%= p.name %> = <%= p.scala_read %><% end %>
        this.<%= m.scala_method %>(<%= m.members.map { |p| p.name } .join ', ' %>)<% end %>
    }
  }

  /** Triggers when the connection opened
   * 
   */
  def onOpen()
  
  /** Triggers when the connection closed
   *  
   */
  def onClose()
  <% for m in n.in_direction.messages.values %>
  /** <%= m.doc %>
   *  
   *  @param connection The message sender<% for p in m.members %>
   *  @param <%= p.name %> <%= p.doc %><% end %>
   */
  def <%= m.scala_method %>(<%= m.members.map { |p| p.name + ': ' + p.type.scala } .join ', ' %>)
<% end %>}
<% end %>